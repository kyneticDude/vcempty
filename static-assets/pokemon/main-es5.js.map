{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/rest.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","rest","pokemons","getPokemons","subscribe","data","console","log","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","endpoint","httpOptions","headers","RestService","http","res","body","get","pipe","extractData","operation","result","error","message","providedIn","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\nimport { RestService } from './rest.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n\n  pokemons:any = [];\n\n  constructor(public rest:RestService) { }\n\n  ngOnInit() {\n    this.getPokemons();\n  }\n\n  getPokemons() {\n    this.pokemons = [];\n    this.rest.getPokemons().subscribe((data: {}) => {\n      console.log(data);\n      this.pokemons = data;\n    });\n  }\n}\n","<h2>Pokemon List</h2>\n\n<div class=\"pokemons\">\n    <div *ngFor=\"let p of pokemons; let i=index;\" class=\"pokemon\">\n        <h5>{{ p.id }}</h5>\n        <h2 class=\"text--lg\">{{i+1}} | {{ p.name }}</h2>\n        <div class=\"metadata\">\n            <span class=\"col\">{{ p.weight }}</span>\n            <span class=\"col\">{{ p.height }}</span>\n        </div>\n        <p>{{ p.description }}</p>\n    </div>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\n\nconst endpoint = '/api/1/services/pokemon.json?site=velocitypoc';\n\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type':  'application/json'\n  })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestService {\n\n  constructor(private http: HttpClient) {}\n\n  private extractData(res: Response) {\n    let body = res;\n    return body || { };\n  }\n\n  getPokemons(): Observable<any> {\n    return this.http.get(endpoint).pipe(\n      map(this.extractData));\n  }\n\n  getPokemon(id): Observable<any> {\n    return this.http.get(endpoint + id).pipe(\n      map(this.extractData));\n  }\n\n  private handleError<T> (operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      console.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}